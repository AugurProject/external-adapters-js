/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'

import type { NBAFetcher } from '../NBAFetcher'

export class NBAFetcher__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<NBAFetcher> {
    return super.deploy(overrides || {}) as Promise<NBAFetcher>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): NBAFetcher {
    return super.attach(address) as NBAFetcher
  }
  connect(signer: Signer): NBAFetcher__factory {
    return super.connect(signer) as NBAFetcher__factory
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NBAFetcher {
    return new Contract(address, _abi, signerOrProvider) as NBAFetcher
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_marketFactory',
        type: 'address',
      },
      {
        internalType: 'contract AMMFactory',
        name: '_ammFactory',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_offset',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_total',
        type: 'uint256',
      },
    ],
    name: 'fetchDynamic',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            internalType: 'enum Sport.SportsEventStatus',
            name: 'status',
            type: 'uint8',
          },
          {
            components: [
              {
                internalType: 'contract AbstractMarketFactoryV3',
                name: 'factory',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'marketId',
                type: 'uint256',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'uint256[]',
                    name: 'tokenRatios',
                    type: 'uint256[]',
                  },
                  {
                    internalType: 'uint256[]',
                    name: 'balances',
                    type: 'uint256[]',
                  },
                  {
                    internalType: 'uint256[]',
                    name: 'weights',
                    type: 'uint256[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'swapFee',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'totalSupply',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Fetcher.PoolBundle',
                name: 'pool',
                type: 'tuple',
              },
              {
                internalType: 'contract OwnedERC20',
                name: 'winner',
                type: 'address',
              },
            ],
            internalType: 'struct Fetcher.DynamicMarketBundle[]',
            name: 'markets',
            type: 'tuple[]',
          },
          {
            internalType: 'uint256',
            name: 'homeScore',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'awayScore',
            type: 'uint256',
          },
        ],
        internalType: 'struct SportsFetcher.DynamicEventBundle[]',
        name: '_bundles',
        type: 'tuple[]',
      },
      {
        internalType: 'uint256',
        name: '_lowestEventIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_timestamp',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_marketFactory',
        type: 'address',
      },
      {
        internalType: 'contract AMMFactory',
        name: '_ammFactory',
        type: 'address',
      },
      {
        internalType: 'contract MasterChef',
        name: '_masterChef',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_offset',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_total',
        type: 'uint256',
      },
    ],
    name: 'fetchInitial',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'shareFactor',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'stakerFee',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'settlementFee',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'protocolFee',
                type: 'uint256',
              },
              {
                internalType: 'contract FeePot',
                name: 'feePot',
                type: 'address',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'string',
                    name: 'symbol',
                    type: 'string',
                  },
                  {
                    internalType: 'uint256',
                    name: 'decimals',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Fetcher.CollateralBundle',
                name: 'collateral',
                type: 'tuple',
              },
              {
                internalType: 'uint256',
                name: 'marketCount',
                type: 'uint256',
              },
            ],
            internalType: 'struct Fetcher.MarketFactoryBundle',
            name: 'super',
            type: 'tuple',
          },
        ],
        internalType: 'struct SportsFetcher.SpecificMarketFactoryBundle',
        name: '_marketFactoryBundle',
        type: 'tuple',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'id',
            type: 'uint256',
          },
          {
            components: [
              {
                internalType: 'contract AbstractMarketFactoryV3',
                name: 'factory',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'marketId',
                type: 'uint256',
              },
              {
                components: [
                  {
                    internalType: 'address',
                    name: 'addr',
                    type: 'address',
                  },
                  {
                    internalType: 'uint256[]',
                    name: 'tokenRatios',
                    type: 'uint256[]',
                  },
                  {
                    internalType: 'uint256[]',
                    name: 'balances',
                    type: 'uint256[]',
                  },
                  {
                    internalType: 'uint256[]',
                    name: 'weights',
                    type: 'uint256[]',
                  },
                  {
                    internalType: 'uint256',
                    name: 'swapFee',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'totalSupply',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct Fetcher.PoolBundle',
                name: 'pool',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'beginTimestamp',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'endTimestamp',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'earlyDepositEndTimestamp',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'totalRewardsAccrued',
                    type: 'uint256',
                  },
                  {
                    internalType: 'bool',
                    name: 'created',
                    type: 'bool',
                  },
                ],
                internalType: 'struct MasterChef.PoolStatusInfo',
                name: 'rewards',
                type: 'tuple',
              },
              {
                internalType: 'contract OwnedERC20[]',
                name: 'shareTokens',
                type: 'address[]',
              },
              {
                internalType: 'uint256',
                name: 'creationTimestamp',
                type: 'uint256',
              },
              {
                internalType: 'contract OwnedERC20',
                name: 'winner',
                type: 'address',
              },
              {
                internalType: 'uint256[]',
                name: 'initialOdds',
                type: 'uint256[]',
              },
            ],
            internalType: 'struct Fetcher.StaticMarketBundle[]',
            name: 'markets',
            type: 'tuple[]',
          },
          {
            internalType: 'int256[]',
            name: 'lines',
            type: 'int256[]',
          },
          {
            internalType: 'uint256',
            name: 'estimatedStartTime',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'homeTeamId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'awayTeamId',
            type: 'uint256',
          },
          {
            internalType: 'string',
            name: 'homeTeamName',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'awayTeamName',
            type: 'string',
          },
          {
            internalType: 'enum Sport.SportsEventStatus',
            name: 'status',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'homeScore',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'awayScore',
            type: 'uint256',
          },
        ],
        internalType: 'struct SportsFetcher.StaticEventBundle[]',
        name: '_eventBundles',
        type: 'tuple[]',
      },
      {
        internalType: 'uint256',
        name: '_lowestEventIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_timestamp',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'marketType',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'version',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x60806040523480156200001157600080fd5b50604051806040016040528060038152602001624e424160e81b8152506040518060400160405280600381526020016215109160ea1b81525081600090805190602001906200006292919062000081565b5080516200007890600190602084019062000081565b5050506200012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000b9576000855562000104565b82601f10620000d457805160ff191683800117855562000104565b8280016001018555821562000104579182015b8281111562000104578251825591602001919060010190620000e7565b506200011292915062000116565b5090565b5b8082111562000112576000815560010162000117565b61223f806200013d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806322254b88146100515780632dd489091461007d57806354fd4d501461009257806356d274911461009a575b600080fd5b61006461005f3660046118c1565b6100bc565b60405161007494939291906120b9565b60405180910390f35b6100856100f5565b60405161007491906120a6565b610085610183565b6100ad6100a836600461191b565b6101dd565b60405161007493929190611f47565b6100c4611447565b60606000806100d2896101fe565b93506100e18989898989610216565b949a90995093975042965092945050505050565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561017b5780601f106101505761010080835404028352916020019161017b565b820191906000526020600020905b81548152906001019060200180831161015e57829003601f168201915b505050505081565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561017b5780601f106101505761010080835404028352916020019161017b565b60606000806101ee878787876102d7565b9098909750429650945050505050565b610206611447565b61020f82610396565b8152919050565b606060006060610227888686610710565b8151955092509050836001600160401b038111801561024557600080fd5b5060405190808252806020026020018201604052801561027f57816020015b61026c61145f565b8152602001906001900390816102645790505b50925060005b848110156102cb576102ac89898985858151811061029f57fe5b6020026020010151610909565b8482815181106102b857fe5b6020908102919091010152600101610285565b50509550959350505050565b6060600060606102e8878686610710565b8151955092509050836001600160401b038111801561030657600080fd5b5060405190808252806020026020018201604052801561034057816020015b61032d6114c4565b8152602001906001900390816103255790505b50925060005b8481101561038b5761036c888884848151811061035f57fe5b6020026020010151610ac6565b84828151811061037857fe5b6020908102919091010152600101610346565b505094509492505050565b61039e6114f4565b816001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d757600080fd5b505afa1580156103eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040f9190611bcb565b816000018181525050816001600160a01b0316634b2d9ffc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190611bcb565b816020018181525050816001600160a01b0316637d1d7fb86040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cb57600080fd5b505afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611bcb565b816040018181525050816001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054557600080fd5b505afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190611bcb565b816060018181525050816001600160a01b0316634c9f66c76040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190611992565b81608001906001600160a01b031690816001600160a01b03168152505061068d826001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561065057600080fd5b505afa158015610664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106889190611992565b610c44565b8160a00181905250816001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ce57600080fd5b505afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190611bcb565b60c0820152919050565b60606000826001600160401b038111801561072a57600080fd5b50604051908082528060200260200182016040528015610754578160200160208202803683370190505b5091506000856001600160a01b03166371be2e4a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079257600080fd5b505afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca9190611bcb565b9050806107ea575050604080516000808252602082019092529150610901565b808086111561080e5750506040805160008082526020820190925292509050610901565b600086820393505b858110610822576108f1565b8361082c576108f1565b604051637ab1e4cd60e11b81526000199094019360009081906001600160a01b038b169063f563c99a90610864908990600401612178565b60006040518083038186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108b89190810190611b87565b915091506108c6828b610d51565b156108ea57808784815181106108d857fe5b60209081029190910101526001909201915b5050610816565b808611156108fd578085525b5050505b935093915050565b61091161145f565b604051630ce3d6d360e31b81526000906001600160a01b0387169063671eb69890610940908690600401612178565b60006040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109949190810190611b55565b905060008160200151516001600160401b03811180156109b357600080fd5b506040519080825280602002602001820160405280156109ed57816020015b6109da611540565b8152602001906001900390816109d25790505b50905060005b8151811015610a3e57610a1f88888886602001518581518110610a1257fe5b6020026020010151610dad565b828281518110610a2b57fe5b60209081029190910101526001016109f3565b5083835281516101008401906004811115610a5557fe5b90816004811115610a6257fe5b905250602083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100810151610120808401919091520151610140820152949350505050565b610ace6114c4565b604051630ce3d6d360e31b81526000906001600160a01b0386169063671eb69890610afd908690600401612178565b60006040518083038186803b158015610b1557600080fd5b505afa158015610b29573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b519190810190611b55565b905060008160200151516001600160401b0381118015610b7057600080fd5b50604051908082528060200260200182016040528015610baa57816020015b610b97611598565b815260200190600190039081610b8f5790505b50905060005b8151811015610bfa57610bdb878785602001518481518110610bce57fe5b6020026020010151610f1f565b828281518110610be757fe5b6020908102919091010152600101610bb0565b5083835260408301819052815160208401906004811115610c1757fe5b90816004811115610c2457fe5b905250506101008101516060830152610120015160808201529392505050565b610c4c6115c4565b6001600160a01b038216808252604080516395d89b4160e01b815290516395d89b4191600480820192600092909190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ccb91908101906119ae565b8160200181905250816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d449190611be3565b60ff166040820152919050565b6000805b836020015151811015610da157600084602001518281518110610d7457fe5b60200260200101519050610d888482610fe3565b15610d9857600192505050610da7565b50600101610d55565b50600090505b92915050565b610db5611540565b60405163eb44fdd360e01b81526000906001600160a01b0387169063eb44fdd390610de4908690600401612178565b60006040518083038186803b158015610dfc57600080fd5b505afa158015610e10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e3891908101906119e0565b6001600160a01b0387168352602083018490529050610e58868685611105565b604080840191909152516327def0cb60e21b81526001600160a01b03851690639f7bc32c90610e8f9088908a908890600401612069565b60a06040518083038186803b158015610ea757600080fd5b505afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190611ae9565b60608301526020810151608083015260e08082015160a084015260408201516001600160a01b031660c08401526101209091015190820152949350505050565b610f27611598565b60405163eb44fdd360e01b81526000906001600160a01b0386169063eb44fdd390610f56908690600401612178565b60006040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610faa91908101906119e0565b6001600160a01b0380871684526020840185905260408201511660608401529050610fd6858585611105565b6040830152509392505050565b600080836001600160a01b031663eb44fdd3846040518263ffffffff1660e01b81526004016110129190612178565b60006040518083038186803b15801561102a57600080fd5b505afa15801561103e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106691908101906119e0565b60408101519091506001600160a01b0316611085576001915050610da7565b600081604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190611bcb565b11949350505050565b61110d6115ee565b604051632dadcf5160e11b81526000906001600160a01b03851690635b5b9ea29061113e908890879060040161208d565b60206040518083038186803b15801561115657600080fd5b505afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e9190611992565b90506001600160a01b0381166111a45750611440565b6001600160a01b038116808352604080516318160ddd60e01b815290516318160ddd91600480820192602092909190829003018186803b1580156111e757600080fd5b505afa1580156111fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121f9190611bcb565b60a083015260405163fa0de35960e01b81526001600160a01b0385169063fa0de35990611252908890879060040161208d565b60206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190611bcb565b608083015260405163d2364bf360e01b81526001600160a01b0385169063d2364bf3906112d5908890879060040161208d565b60006040518083038186803b1580156112ed57600080fd5b505afa158015611301573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113299190810190611960565b6040808401919091525163c7b4b6dd60e01b81526001600160a01b0385169063c7b4b6dd9061135e908890879060040161208d565b60006040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b29190810190611960565b602083015260405163d055da7160e01b81526001600160a01b0385169063d055da71906113e5908890879060040161208d565b60006040518083038186803b1580156113fd57600080fd5b505afa158015611411573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114399190810190611960565b6060830152505b9392505050565b604051806020016040528061145a6114f4565b905290565b6040518061016001604052806000815260200160608152602001606081526020016000815260200160008152602001600081526020016060815260200160608152602001600060048111156114b057fe5b815260200160008152602001600081525090565b6040805160a081019091526000808252602082019081526020016060815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016115336115c4565b8152602001600081525090565b6040805161010081018252600080825260208201529081016115606115ee565b815260200161156d61162d565b8152602001606081526020016000815260200160006001600160a01b03168152602001606081525090565b60408051608081018252600080825260208201529081016115b76115ee565b8152600060209091015290565b604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b8051611669816121f1565b919050565b600082601f83011261167e578081fd5b8151602061169361168e836121a4565b612181565b82815281810190858301838502870184018810156116af578586fd5b855b858110156116d65781516116c4816121f1565b845292840192908401906001016116b1565b5090979650505050505050565b600082601f8301126116f3578081fd5b8151602061170361168e836121a4565b828152818101908583018385028701840188101561171f578586fd5b855b858110156116d657815184529284019290840190600101611721565b8051801515811461166957600080fd5b80516005811061166957600080fd5b600082601f83011261176c578081fd5b81516001600160401b0381111561177f57fe5b611792601f8201601f1916602001612181565b8181528460208386010111156117a6578283fd5b6117b78260208301602087016121c1565b949350505050565b60006101408083850312156117d2578182fd5b6117db81612181565b9150506117e78261174d565b815260208201516001600160401b038082111561180357600080fd5b61180f858386016116e3565b6020840152604084015191508082111561182857600080fd5b611834858386016116e3565b6040840152606084015160608401526080840151608084015260a084015160a084015260c084015191508082111561186b57600080fd5b6118778583860161175c565b60c084015260e084015191508082111561189057600080fd5b5061189d8482850161175c565b60e08301525061010080830151818301525061012080830151818301525092915050565b600080600080600060a086880312156118d8578081fd5b85356118e3816121f1565b945060208601356118f3816121f1565b93506040860135611903816121f1565b94979396509394606081013594506080013592915050565b60008060008060808587031215611930578182fd5b843561193b816121f1565b9350602085013561194b816121f1565b93969395505050506040820135916060013590565b600060208284031215611971578081fd5b81516001600160401b03811115611986578182fd5b6117b7848285016116e3565b6000602082840312156119a3578081fd5b8151611440816121f1565b6000602082840312156119bf578081fd5b81516001600160401b038111156119d4578182fd5b6117b78482850161175c565b6000602082840312156119f1578081fd5b81516001600160401b0380821115611a07578283fd5b8184019150610160808387031215611a1d578384fd5b611a2681612181565b9050611a318361165e565b8152602083015182811115611a44578485fd5b611a508782860161166e565b602083015250611a626040840161165e565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015183811115611ab8578586fd5b611ac4888287016116e3565b8284015250506101409150611ada82840161173d565b91810191909152949350505050565b600060a08284031215611afa578081fd5b60405160a081018181106001600160401b0382111715611b1657fe5b806040525082518152602083015160208201526040830151604082015260608301516060820152611b496080840161173d565b60808201529392505050565b600060208284031215611b66578081fd5b81516001600160401b03811115611b7b578182fd5b6117b7848285016117bf565b60008060408385031215611b99578182fd5b82516001600160401b03811115611bae578283fd5b611bba858286016117bf565b925050602083015190509250929050565b600060208284031215611bdc578081fd5b5051919050565b600060208284031215611bf4578081fd5b815160ff81168114611440578182fd5b6000815180845260208085019450808401835b83811015611c3c5781516001600160a01b031687529582019590820190600101611c17565b509495945050505050565b6000815180845260208085019450808401835b83811015611c3c57815187529582019590820190600101611c5a565b6000815180845260208085018081965082840281019150828601855b85811015611d6e578284038952815161016081518652868201518188880152611cbd82880182611d7b565b91505060408083015187830382890152611cd78382611c47565b925050506060808301518188015250608080830151818801525060a080830151818801525060c08083015187830382890152611d138382611e6e565b9250505060e08083015187830382890152611d2e8382611e6e565b9250505061010080830151611d4582890182611e60565b505061012082810151908701526101409182015191909501529784019790840190600101611c92565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015611d6e5782840389528151610180611db4868351611e53565b86820151878701526040808301518282890152611dd383890182611e9a565b92505050606080830151611de982890182611f15565b50506080820151868203610100880152611e038282611c04565b91505060a082015161012087015260c0820151611e24610140880182611e53565b5060e08201519150858103610160870152611e3f8183611c47565b9a87019a9550505090840190600101611d97565b6001600160a01b03169052565b60058110611e6a57fe5b9052565b60008151808452611e868160208601602086016121c1565b601f01601f19169290920160200192915050565b600060018060a01b038251168352602082015160c06020850152611ec160c0850182611c47565b905060408301518482036040860152611eda8282611c47565b91505060608301518482036060860152611ef48282611c47565b9150506080830151608085015260a083015160a08501528091505092915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151151560808301525050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b8381101561204f57607f19888403018552815160a084018151855287820151611f9989870182611e60565b50604082015160a0604087015281815180845260c08801915060c08b820289010193508a830192508b5b818110156120265760bf19898603018352835160018060a01b038082511687528d8201518e8801526040820151608060408901526120046080890182611e9a565b606093840151909216979092019690965250928b0192918b0191600101611fc3565b505050506060828101519086015260809182015191909401529385019390850190600101611f6e565b505092850196909652506040909201929092529392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082526114406020830184611e6e565b600060808252855160206080840152805160a0840152602081015160c0840152604081015160e08401526060810151610100840152608081015160018060a01b0380821661012086015260a0830151915060e06101408601528082511661018086015250602081015160606101a08601526121386101e0860182611e6e565b905060408201516101c086015260c083015161016086015284810360208601526121628189611c76565b6040860197909752505050506060015292915050565b90815260200190565b6040518181016001600160401b038111828210171561219c57fe5b604052919050565b60006001600160401b038211156121b757fe5b5060209081020190565b60005b838110156121dc5781810151838201526020016121c4565b838111156121eb576000848401525b50505050565b6001600160a01b038116811461220657600080fd5b5056fea26469706673582212206f9ef6ee52bff9696aa61a3836db8003f35130593296f8cc29ef1e68b4b9707964736f6c63430007060033'

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface NBAFetcherInterface extends ethers.utils.Interface {
  functions: {
    'fetchDynamic(address,address,uint256,uint256)': FunctionFragment
    'fetchInitial(address,address,address,uint256,uint256)': FunctionFragment
    'marketType()': FunctionFragment
    'version()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'fetchDynamic',
    values: [string, string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'fetchInitial',
    values: [string, string, string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'marketType', values?: undefined): string
  encodeFunctionData(functionFragment: 'version', values?: undefined): string

  decodeFunctionResult(functionFragment: 'fetchDynamic', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fetchInitial', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'marketType', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result

  events: {}
}

export class NBAFetcher extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: NBAFetcherInterface

  functions: {
    fetchDynamic(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _bundles: ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    'fetchDynamic(address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _bundles: ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    fetchInitial(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        },
        ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _marketFactoryBundle: [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        }
        _eventBundles: ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    'fetchInitial(address,address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        },
        ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _marketFactoryBundle: [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        }
        _eventBundles: ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    marketType(overrides?: CallOverrides): Promise<[string]>

    'marketType()'(overrides?: CallOverrides): Promise<[string]>

    version(overrides?: CallOverrides): Promise<[string]>

    'version()'(overrides?: CallOverrides): Promise<[string]>
  }

  fetchDynamic(
    _marketFactory: string,
    _ammFactory: string,
    _offset: BigNumberish,
    _total: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      ([
        BigNumber,
        number,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[],
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        status: number
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[]
        homeScore: BigNumber
        awayScore: BigNumber
      })[],
      BigNumber,
      BigNumber,
    ] & {
      _bundles: ([
        BigNumber,
        number,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[],
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        status: number
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[]
        homeScore: BigNumber
        awayScore: BigNumber
      })[]
      _lowestEventIndex: BigNumber
      _timestamp: BigNumber
    }
  >

  'fetchDynamic(address,address,uint256,uint256)'(
    _marketFactory: string,
    _ammFactory: string,
    _offset: BigNumberish,
    _total: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      ([
        BigNumber,
        number,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[],
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        status: number
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[]
        homeScore: BigNumber
        awayScore: BigNumber
      })[],
      BigNumber,
      BigNumber,
    ] & {
      _bundles: ([
        BigNumber,
        number,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[],
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        status: number
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          string,
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          winner: string
        })[]
        homeScore: BigNumber
        awayScore: BigNumber
      })[]
      _lowestEventIndex: BigNumber
      _timestamp: BigNumber
    }
  >

  fetchInitial(
    _marketFactory: string,
    _ammFactory: string,
    _masterChef: string,
    _offset: BigNumberish,
    _total: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        },
      ] & {
        super: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        }
      },
      ([
        BigNumber,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        status: number
        homeScore: BigNumber
        awayScore: BigNumber
      })[],
      BigNumber,
      BigNumber,
    ] & {
      _marketFactoryBundle: [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        },
      ] & {
        super: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        }
      }
      _eventBundles: ([
        BigNumber,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        status: number
        homeScore: BigNumber
        awayScore: BigNumber
      })[]
      _lowestEventIndex: BigNumber
      _timestamp: BigNumber
    }
  >

  'fetchInitial(address,address,address,uint256,uint256)'(
    _marketFactory: string,
    _ammFactory: string,
    _masterChef: string,
    _offset: BigNumberish,
    _total: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        },
      ] & {
        super: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        }
      },
      ([
        BigNumber,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        status: number
        homeScore: BigNumber
        awayScore: BigNumber
      })[],
      BigNumber,
      BigNumber,
    ] & {
      _marketFactoryBundle: [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        },
      ] & {
        super: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          },
          BigNumber,
        ] & {
          shareFactor: BigNumber
          stakerFee: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          feePot: string
          collateral: [string, string, BigNumber] & {
            addr: string
            symbol: string
            decimals: BigNumber
          }
          marketCount: BigNumber
        }
      }
      _eventBundles: ([
        BigNumber,
        ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
      ] & {
        id: BigNumber
        markets: ([
          string,
          BigNumber,
          [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          },
          string[],
          BigNumber,
          string,
          BigNumber[],
        ] & {
          factory: string
          marketId: BigNumber
          pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
            addr: string
            tokenRatios: BigNumber[]
            balances: BigNumber[]
            weights: BigNumber[]
            swapFee: BigNumber
            totalSupply: BigNumber
          }
          rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
            beginTimestamp: BigNumber
            endTimestamp: BigNumber
            earlyDepositEndTimestamp: BigNumber
            totalRewardsAccrued: BigNumber
            created: boolean
          }
          shareTokens: string[]
          creationTimestamp: BigNumber
          winner: string
          initialOdds: BigNumber[]
        })[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        status: number
        homeScore: BigNumber
        awayScore: BigNumber
      })[]
      _lowestEventIndex: BigNumber
      _timestamp: BigNumber
    }
  >

  marketType(overrides?: CallOverrides): Promise<string>

  'marketType()'(overrides?: CallOverrides): Promise<string>

  version(overrides?: CallOverrides): Promise<string>

  'version()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    fetchDynamic(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _bundles: ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    'fetchDynamic(address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _bundles: ([
          BigNumber,
          number,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[],
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          status: number
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            string,
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            winner: string
          })[]
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    fetchInitial(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        },
        ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _marketFactoryBundle: [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        }
        _eventBundles: ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    'fetchInitial(address,address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        },
        ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[],
        BigNumber,
        BigNumber,
      ] & {
        _marketFactoryBundle: [
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          },
        ] & {
          super: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            },
            BigNumber,
          ] & {
            shareFactor: BigNumber
            stakerFee: BigNumber
            settlementFee: BigNumber
            protocolFee: BigNumber
            feePot: string
            collateral: [string, string, BigNumber] & {
              addr: string
              symbol: string
              decimals: BigNumber
            }
            marketCount: BigNumber
          }
        }
        _eventBundles: ([
          BigNumber,
          ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          number,
          BigNumber,
          BigNumber,
        ] & {
          id: BigNumber
          markets: ([
            string,
            BigNumber,
            [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            },
            string[],
            BigNumber,
            string,
            BigNumber[],
          ] & {
            factory: string
            marketId: BigNumber
            pool: [string, BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
              addr: string
              tokenRatios: BigNumber[]
              balances: BigNumber[]
              weights: BigNumber[]
              swapFee: BigNumber
              totalSupply: BigNumber
            }
            rewards: [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
              beginTimestamp: BigNumber
              endTimestamp: BigNumber
              earlyDepositEndTimestamp: BigNumber
              totalRewardsAccrued: BigNumber
              created: boolean
            }
            shareTokens: string[]
            creationTimestamp: BigNumber
            winner: string
            initialOdds: BigNumber[]
          })[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          status: number
          homeScore: BigNumber
          awayScore: BigNumber
        })[]
        _lowestEventIndex: BigNumber
        _timestamp: BigNumber
      }
    >

    marketType(overrides?: CallOverrides): Promise<string>

    'marketType()'(overrides?: CallOverrides): Promise<string>

    version(overrides?: CallOverrides): Promise<string>

    'version()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    fetchDynamic(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'fetchDynamic(address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    fetchInitial(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'fetchInitial(address,address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    marketType(overrides?: CallOverrides): Promise<BigNumber>

    'marketType()'(overrides?: CallOverrides): Promise<BigNumber>

    version(overrides?: CallOverrides): Promise<BigNumber>

    'version()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    fetchDynamic(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'fetchDynamic(address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    fetchInitial(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'fetchInitial(address,address,address,uint256,uint256)'(
      _marketFactory: string,
      _ammFactory: string,
      _masterChef: string,
      _offset: BigNumberish,
      _total: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    marketType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'marketType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'version()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}

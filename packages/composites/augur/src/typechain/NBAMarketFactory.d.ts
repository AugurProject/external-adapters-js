/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface NBAMarketFactoryInterface extends ethers.utils.Interface {
  functions: {
    'accumulatedProtocolFee()': FunctionFragment
    'accumulatedSettlementFees(address)': FunctionFragment
    'burnShares(uint256,uint256,address)': FunctionFragment
    'calcCost(uint256)': FunctionFragment
    'calcShares(uint256)': FunctionFragment
    'claimManyWinnings(uint256[],address)': FunctionFragment
    'claimProtocolFees()': FunctionFragment
    'claimSettlementFees(address)': FunctionFragment
    'claimWinnings(uint256,address)': FunctionFragment
    'collateral()': FunctionFragment
    'createEvent(uint256,string,uint256,string,uint256,uint256,int256,int256,int256[2])': FunctionFragment
    'eventCount()': FunctionFragment
    'feePot()': FunctionFragment
    'getEventMarkets(uint256)': FunctionFragment
    'getMarket(uint256)': FunctionFragment
    'getOwner()': FunctionFragment
    'getSportsEvent(uint256)': FunctionFragment
    'getSportsEventByIndex(uint256)': FunctionFragment
    'getVersion()': FunctionFragment
    'isMarketResolved(uint256)': FunctionFragment
    'linkNode()': FunctionFragment
    'listOfSportsEvents(uint256)': FunctionFragment
    'listResolvableEvents()': FunctionFragment
    'marketCount()': FunctionFragment
    'mintShares(uint256,uint256,address)': FunctionFragment
    'protocol()': FunctionFragment
    'protocolFee()': FunctionFragment
    'resolveEvent(uint256,uint8,uint256,uint256,uint256,uint256)': FunctionFragment
    'setLinkNode(address)': FunctionFragment
    'setProtocol(address,bool)': FunctionFragment
    'setProtocolFee(uint256)': FunctionFragment
    'setSettlementFee(uint256)': FunctionFragment
    'setStakerFee(uint256)': FunctionFragment
    'settlementFee()': FunctionFragment
    'shareFactor()': FunctionFragment
    'sportsEvents(uint256)': FunctionFragment
    'stakerFee()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'accumulatedProtocolFee', values?: undefined): string
  encodeFunctionData(functionFragment: 'accumulatedSettlementFees', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burnShares',
    values: [BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'calcCost', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'calcShares', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'claimManyWinnings',
    values: [BigNumberish[], string],
  ): string
  encodeFunctionData(functionFragment: 'claimProtocolFees', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimSettlementFees', values: [string]): string
  encodeFunctionData(functionFragment: 'claimWinnings', values: [BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'collateral', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'createEvent',
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
    ],
  ): string
  encodeFunctionData(functionFragment: 'eventCount', values?: undefined): string
  encodeFunctionData(functionFragment: 'feePot', values?: undefined): string
  encodeFunctionData(functionFragment: 'getEventMarkets', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getMarket', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'getSportsEvent', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getSportsEventByIndex', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getVersion', values?: undefined): string
  encodeFunctionData(functionFragment: 'isMarketResolved', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'linkNode', values?: undefined): string
  encodeFunctionData(functionFragment: 'listOfSportsEvents', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'listResolvableEvents', values?: undefined): string
  encodeFunctionData(functionFragment: 'marketCount', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'mintShares',
    values: [BigNumberish, BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'protocol', values?: undefined): string
  encodeFunctionData(functionFragment: 'protocolFee', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'resolveEvent',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'setLinkNode', values: [string]): string
  encodeFunctionData(functionFragment: 'setProtocol', values: [string, boolean]): string
  encodeFunctionData(functionFragment: 'setProtocolFee', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setSettlementFee', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setStakerFee', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'settlementFee', values?: undefined): string
  encodeFunctionData(functionFragment: 'shareFactor', values?: undefined): string
  encodeFunctionData(functionFragment: 'sportsEvents', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'stakerFee', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

  decodeFunctionResult(functionFragment: 'accumulatedProtocolFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'accumulatedSettlementFees', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burnShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcCost', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimManyWinnings', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimProtocolFees', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimSettlementFees', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimWinnings', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createEvent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'eventCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feePot', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getEventMarkets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSportsEvent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSportsEventByIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVersion', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isMarketResolved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'linkNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listOfSportsEvents', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listResolvableEvents', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'marketCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'protocol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'protocolFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'resolveEvent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setLinkNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setProtocol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setProtocolFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setSettlementFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setStakerFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settlementFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'shareFactor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sportsEvents', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'LinkNodeChanged(address)': EventFragment
    'MarketActivated(uint256)': EventFragment
    'MarketCreated(uint256,string[],uint256[])': EventFragment
    'MarketResolved(uint256,address,uint256,string)': EventFragment
    'SharesBurned(uint256,uint256,address)': EventFragment
    'SharesMinted(uint256,uint256,address)': EventFragment
    'SportsEventCreated(uint256,uint256[],int256[],uint256,uint256,string,string,uint256)': EventFragment
    'WinningsClaimed(uint256,address,uint256,string,uint256,uint256,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LinkNodeChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MarketActivated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MarketCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MarketResolved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SharesBurned'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SharesMinted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SportsEventCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WinningsClaimed'): EventFragment
}

export class NBAMarketFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: NBAMarketFactoryInterface

  functions: {
    accumulatedProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>

    'accumulatedProtocolFee()'(overrides?: CallOverrides): Promise<[BigNumber]>

    accumulatedSettlementFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'accumulatedSettlementFees(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    burnShares(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'burnShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    calcCost(_shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'calcCost(uint256)'(_shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    calcShares(_collateralIn: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'calcShares(uint256)'(
      _collateralIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    claimManyWinnings(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'claimManyWinnings(uint256[],address)'(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    claimProtocolFees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'claimProtocolFees()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    claimSettlementFees(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'claimSettlementFees(address)'(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    claimWinnings(
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'claimWinnings(uint256,address)'(
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    collateral(overrides?: CallOverrides): Promise<[string]>

    'collateral()'(overrides?: CallOverrides): Promise<[string]>

    createEvent(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'createEvent(uint256,string,uint256,string,uint256,uint256,int256,int256,int256[2])'(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    eventCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'eventCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    feePot(overrides?: CallOverrides): Promise<[string]>

    'feePot()'(overrides?: CallOverrides): Promise<[string]>

    getEventMarkets(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { _markets: BigNumber[] }>

    'getEventMarkets(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { _markets: BigNumber[] }>

    getMarket(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          string,
          string[],
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          boolean,
        ] & {
          settlementAddress: string
          shareTokens: string[]
          winner: string
          winnerIndex: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          stakerFee: BigNumber
          creationTimestamp: BigNumber
          initialOdds: BigNumber[]
          active: boolean
        },
      ]
    >

    'getMarket(uint256)'(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          string,
          string[],
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          boolean,
        ] & {
          settlementAddress: string
          shareTokens: string[]
          winner: string
          winnerIndex: BigNumber
          settlementFee: BigNumber
          protocolFee: BigNumber
          stakerFee: BigNumber
          creationTimestamp: BigNumber
          initialOdds: BigNumber[]
          active: boolean
        },
      ]
    >

    getOwner(overrides?: CallOverrides): Promise<[string]>

    'getOwner()'(overrides?: CallOverrides): Promise<[string]>

    getSportsEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        },
      ]
    >

    'getSportsEvent(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        },
      ]
    >

    getSportsEventByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        },
        BigNumber,
      ] & {
        _event: [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        }
        _eventId: BigNumber
      }
    >

    'getSportsEventByIndex(uint256)'(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        },
        BigNumber,
      ] & {
        _event: [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        }
        _eventId: BigNumber
      }
    >

    getVersion(overrides?: CallOverrides): Promise<[string]>

    'getVersion()'(overrides?: CallOverrides): Promise<[string]>

    isMarketResolved(_id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    'isMarketResolved(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    linkNode(overrides?: CallOverrides): Promise<[string]>

    'linkNode()'(overrides?: CallOverrides): Promise<[string]>

    listOfSportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    'listOfSportsEvents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    listResolvableEvents(overrides?: CallOverrides): Promise<[BigNumber[]]>

    'listResolvableEvents()'(overrides?: CallOverrides): Promise<[BigNumber[]]>

    marketCount(overrides?: CallOverrides): Promise<[BigNumber]>

    'marketCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

    mintShares(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'mintShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    protocol(overrides?: CallOverrides): Promise<[string]>

    'protocol()'(overrides?: CallOverrides): Promise<[string]>

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>

    'protocolFee()'(overrides?: CallOverrides): Promise<[BigNumber]>

    resolveEvent(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'resolveEvent(uint256,uint8,uint256,uint256,uint256,uint256)'(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setLinkNode(
      _newLinkNode: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'setLinkNode(address)'(
      _newLinkNode: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setProtocol(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'setProtocol(address,bool)'(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setProtocolFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'setProtocolFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setSettlementFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'setSettlementFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setStakerFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'setStakerFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    settlementFee(overrides?: CallOverrides): Promise<[BigNumber]>

    'settlementFee()'(overrides?: CallOverrides): Promise<[BigNumber]>

    shareFactor(overrides?: CallOverrides): Promise<[BigNumber]>

    'shareFactor()'(overrides?: CallOverrides): Promise<[BigNumber]>

    sportsEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        status: number
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
    >

    'sportsEvents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        status: number
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
    >

    stakerFee(overrides?: CallOverrides): Promise<[BigNumber]>

    'stakerFee()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  accumulatedProtocolFee(overrides?: CallOverrides): Promise<BigNumber>

  'accumulatedProtocolFee()'(overrides?: CallOverrides): Promise<BigNumber>

  accumulatedSettlementFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'accumulatedSettlementFees(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  burnShares(
    _id: BigNumberish,
    _sharesToBurn: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'burnShares(uint256,uint256,address)'(
    _id: BigNumberish,
    _sharesToBurn: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  calcCost(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'calcCost(uint256)'(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  calcShares(_collateralIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'calcShares(uint256)'(_collateralIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  claimManyWinnings(
    _ids: BigNumberish[],
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'claimManyWinnings(uint256[],address)'(
    _ids: BigNumberish[],
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  claimProtocolFees(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'claimProtocolFees()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  claimSettlementFees(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'claimSettlementFees(address)'(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  claimWinnings(
    _id: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'claimWinnings(uint256,address)'(
    _id: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  collateral(overrides?: CallOverrides): Promise<string>

  'collateral()'(overrides?: CallOverrides): Promise<string>

  createEvent(
    _eventId: BigNumberish,
    _homeTeamName: string,
    _homeTeamId: BigNumberish,
    _awayTeamName: string,
    _awayTeamId: BigNumberish,
    _startTimestamp: BigNumberish,
    _homeSpread: BigNumberish,
    _totalScore: BigNumberish,
    _moneylines: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'createEvent(uint256,string,uint256,string,uint256,uint256,int256,int256,int256[2])'(
    _eventId: BigNumberish,
    _homeTeamName: string,
    _homeTeamId: BigNumberish,
    _awayTeamName: string,
    _awayTeamId: BigNumberish,
    _startTimestamp: BigNumberish,
    _homeSpread: BigNumberish,
    _totalScore: BigNumberish,
    _moneylines: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  eventCount(overrides?: CallOverrides): Promise<BigNumber>

  'eventCount()'(overrides?: CallOverrides): Promise<BigNumber>

  feePot(overrides?: CallOverrides): Promise<string>

  'feePot()'(overrides?: CallOverrides): Promise<string>

  getEventMarkets(_eventId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>

  'getEventMarkets(uint256)'(
    _eventId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>

  getMarket(
    _id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      string,
      string[],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[],
      boolean,
    ] & {
      settlementAddress: string
      shareTokens: string[]
      winner: string
      winnerIndex: BigNumber
      settlementFee: BigNumber
      protocolFee: BigNumber
      stakerFee: BigNumber
      creationTimestamp: BigNumber
      initialOdds: BigNumber[]
      active: boolean
    }
  >

  'getMarket(uint256)'(
    _id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      string,
      string[],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[],
      boolean,
    ] & {
      settlementAddress: string
      shareTokens: string[]
      winner: string
      winnerIndex: BigNumber
      settlementFee: BigNumber
      protocolFee: BigNumber
      stakerFee: BigNumber
      creationTimestamp: BigNumber
      initialOdds: BigNumber[]
      active: boolean
    }
  >

  getOwner(overrides?: CallOverrides): Promise<string>

  'getOwner()'(overrides?: CallOverrides): Promise<string>

  getSportsEvent(
    _eventId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      number,
      BigNumber[],
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
    ] & {
      status: number
      markets: BigNumber[]
      lines: BigNumber[]
      estimatedStartTime: BigNumber
      homeTeamId: BigNumber
      awayTeamId: BigNumber
      homeTeamName: string
      awayTeamName: string
      homeScore: BigNumber
      awayScore: BigNumber
    }
  >

  'getSportsEvent(uint256)'(
    _eventId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      number,
      BigNumber[],
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
    ] & {
      status: number
      markets: BigNumber[]
      lines: BigNumber[]
      estimatedStartTime: BigNumber
      homeTeamId: BigNumber
      awayTeamId: BigNumber
      homeTeamName: string
      awayTeamName: string
      homeScore: BigNumber
      awayScore: BigNumber
    }
  >

  getSportsEventByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        number,
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
      ] & {
        status: number
        markets: BigNumber[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      },
      BigNumber,
    ] & {
      _event: [
        number,
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
      ] & {
        status: number
        markets: BigNumber[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
      _eventId: BigNumber
    }
  >

  'getSportsEventByIndex(uint256)'(
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        number,
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
      ] & {
        status: number
        markets: BigNumber[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      },
      BigNumber,
    ] & {
      _event: [
        number,
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
      ] & {
        status: number
        markets: BigNumber[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
      _eventId: BigNumber
    }
  >

  getVersion(overrides?: CallOverrides): Promise<string>

  'getVersion()'(overrides?: CallOverrides): Promise<string>

  isMarketResolved(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  'isMarketResolved(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  linkNode(overrides?: CallOverrides): Promise<string>

  'linkNode()'(overrides?: CallOverrides): Promise<string>

  listOfSportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'listOfSportsEvents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  listResolvableEvents(overrides?: CallOverrides): Promise<BigNumber[]>

  'listResolvableEvents()'(overrides?: CallOverrides): Promise<BigNumber[]>

  marketCount(overrides?: CallOverrides): Promise<BigNumber>

  'marketCount()'(overrides?: CallOverrides): Promise<BigNumber>

  mintShares(
    _id: BigNumberish,
    _shareToMint: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'mintShares(uint256,uint256,address)'(
    _id: BigNumberish,
    _shareToMint: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  protocol(overrides?: CallOverrides): Promise<string>

  'protocol()'(overrides?: CallOverrides): Promise<string>

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>

  'protocolFee()'(overrides?: CallOverrides): Promise<BigNumber>

  resolveEvent(
    _eventId: BigNumberish,
    _eventStatus: BigNumberish,
    _homeTeamId: BigNumberish,
    _awayTeamId: BigNumberish,
    _homeScore: BigNumberish,
    _awayScore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'resolveEvent(uint256,uint8,uint256,uint256,uint256,uint256)'(
    _eventId: BigNumberish,
    _eventStatus: BigNumberish,
    _homeTeamId: BigNumberish,
    _awayTeamId: BigNumberish,
    _homeScore: BigNumberish,
    _awayScore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setLinkNode(
    _newLinkNode: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'setLinkNode(address)'(
    _newLinkNode: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setProtocol(
    _newProtocol: string,
    _claimFirst: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'setProtocol(address,bool)'(
    _newProtocol: string,
    _claimFirst: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setProtocolFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'setProtocolFee(uint256)'(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setSettlementFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'setSettlementFee(uint256)'(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setStakerFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'setStakerFee(uint256)'(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  settlementFee(overrides?: CallOverrides): Promise<BigNumber>

  'settlementFee()'(overrides?: CallOverrides): Promise<BigNumber>

  shareFactor(overrides?: CallOverrides): Promise<BigNumber>

  'shareFactor()'(overrides?: CallOverrides): Promise<BigNumber>

  sportsEvents(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      status: number
      estimatedStartTime: BigNumber
      homeTeamId: BigNumber
      awayTeamId: BigNumber
      homeTeamName: string
      awayTeamName: string
      homeScore: BigNumber
      awayScore: BigNumber
    }
  >

  'sportsEvents(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      status: number
      estimatedStartTime: BigNumber
      homeTeamId: BigNumber
      awayTeamId: BigNumber
      homeTeamName: string
      awayTeamName: string
      homeScore: BigNumber
      awayScore: BigNumber
    }
  >

  stakerFee(overrides?: CallOverrides): Promise<BigNumber>

  'stakerFee()'(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    accumulatedProtocolFee(overrides?: CallOverrides): Promise<BigNumber>

    'accumulatedProtocolFee()'(overrides?: CallOverrides): Promise<BigNumber>

    accumulatedSettlementFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'accumulatedSettlementFees(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    burnShares(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'burnShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    calcCost(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'calcCost(uint256)'(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    calcShares(_collateralIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'calcShares(uint256)'(
      _collateralIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    claimManyWinnings(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'claimManyWinnings(uint256[],address)'(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    claimProtocolFees(overrides?: CallOverrides): Promise<BigNumber>

    'claimProtocolFees()'(overrides?: CallOverrides): Promise<BigNumber>

    claimSettlementFees(_receiver: string, overrides?: CallOverrides): Promise<BigNumber>

    'claimSettlementFees(address)'(_receiver: string, overrides?: CallOverrides): Promise<BigNumber>

    claimWinnings(
      _id: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    'claimWinnings(uint256,address)'(
      _id: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    collateral(overrides?: CallOverrides): Promise<string>

    'collateral()'(overrides?: CallOverrides): Promise<string>

    createEvent(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    'createEvent(uint256,string,uint256,string,uint256,uint256,int256,int256,int256[2])'(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    eventCount(overrides?: CallOverrides): Promise<BigNumber>

    'eventCount()'(overrides?: CallOverrides): Promise<BigNumber>

    feePot(overrides?: CallOverrides): Promise<string>

    'feePot()'(overrides?: CallOverrides): Promise<string>

    getEventMarkets(_eventId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>

    'getEventMarkets(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    getMarket(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        boolean,
      ] & {
        settlementAddress: string
        shareTokens: string[]
        winner: string
        winnerIndex: BigNumber
        settlementFee: BigNumber
        protocolFee: BigNumber
        stakerFee: BigNumber
        creationTimestamp: BigNumber
        initialOdds: BigNumber[]
        active: boolean
      }
    >

    'getMarket(uint256)'(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        boolean,
      ] & {
        settlementAddress: string
        shareTokens: string[]
        winner: string
        winnerIndex: BigNumber
        settlementFee: BigNumber
        protocolFee: BigNumber
        stakerFee: BigNumber
        creationTimestamp: BigNumber
        initialOdds: BigNumber[]
        active: boolean
      }
    >

    getOwner(overrides?: CallOverrides): Promise<string>

    'getOwner()'(overrides?: CallOverrides): Promise<string>

    getSportsEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        number,
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
      ] & {
        status: number
        markets: BigNumber[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
    >

    'getSportsEvent(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        number,
        BigNumber[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
      ] & {
        status: number
        markets: BigNumber[]
        lines: BigNumber[]
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
    >

    getSportsEventByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        },
        BigNumber,
      ] & {
        _event: [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        }
        _eventId: BigNumber
      }
    >

    'getSportsEventByIndex(uint256)'(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        },
        BigNumber,
      ] & {
        _event: [
          number,
          BigNumber[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
        ] & {
          status: number
          markets: BigNumber[]
          lines: BigNumber[]
          estimatedStartTime: BigNumber
          homeTeamId: BigNumber
          awayTeamId: BigNumber
          homeTeamName: string
          awayTeamName: string
          homeScore: BigNumber
          awayScore: BigNumber
        }
        _eventId: BigNumber
      }
    >

    getVersion(overrides?: CallOverrides): Promise<string>

    'getVersion()'(overrides?: CallOverrides): Promise<string>

    isMarketResolved(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    'isMarketResolved(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    linkNode(overrides?: CallOverrides): Promise<string>

    'linkNode()'(overrides?: CallOverrides): Promise<string>

    listOfSportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'listOfSportsEvents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    listResolvableEvents(overrides?: CallOverrides): Promise<BigNumber[]>

    'listResolvableEvents()'(overrides?: CallOverrides): Promise<BigNumber[]>

    marketCount(overrides?: CallOverrides): Promise<BigNumber>

    'marketCount()'(overrides?: CallOverrides): Promise<BigNumber>

    mintShares(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<void>

    'mintShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides,
    ): Promise<void>

    protocol(overrides?: CallOverrides): Promise<string>

    'protocol()'(overrides?: CallOverrides): Promise<string>

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>

    'protocolFee()'(overrides?: CallOverrides): Promise<BigNumber>

    resolveEvent(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    'resolveEvent(uint256,uint8,uint256,uint256,uint256,uint256)'(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setLinkNode(_newLinkNode: string, overrides?: CallOverrides): Promise<void>

    'setLinkNode(address)'(_newLinkNode: string, overrides?: CallOverrides): Promise<void>

    setProtocol(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    'setProtocol(address,bool)'(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: CallOverrides,
    ): Promise<void>

    setProtocolFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setProtocolFee(uint256)'(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    setSettlementFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setSettlementFee(uint256)'(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    setStakerFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    'setStakerFee(uint256)'(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    settlementFee(overrides?: CallOverrides): Promise<BigNumber>

    'settlementFee()'(overrides?: CallOverrides): Promise<BigNumber>

    shareFactor(overrides?: CallOverrides): Promise<BigNumber>

    'shareFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    sportsEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        status: number
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
    >

    'sportsEvents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
        status: number
        estimatedStartTime: BigNumber
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        homeScore: BigNumber
        awayScore: BigNumber
      }
    >

    stakerFee(overrides?: CallOverrides): Promise<BigNumber>

    'stakerFee()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(_newOwner: string, overrides?: CallOverrides): Promise<boolean>

    'transferOwnership(address)'(_newOwner: string, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    LinkNodeChanged(newLinkNode: null): TypedEventFilter<[string], { newLinkNode: string }>

    MarketActivated(id: null): TypedEventFilter<[BigNumber], { id: BigNumber }>

    MarketCreated(
      id: null,
      names: null,
      initialOdds: null,
    ): TypedEventFilter<
      [BigNumber, string[], BigNumber[]],
      { id: BigNumber; names: string[]; initialOdds: BigNumber[] }
    >

    MarketResolved(
      id: null,
      winner: null,
      winnerIndex: null,
      winnerName: null,
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      {
        id: BigNumber
        winner: string
        winnerIndex: BigNumber
        winnerName: string
      }
    >

    SharesBurned(
      id: null,
      amount: null,
      receiver: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { id: BigNumber; amount: BigNumber; receiver: string }
    >

    SharesMinted(
      id: null,
      amount: null,
      receiver: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { id: BigNumber; amount: BigNumber; receiver: string }
    >

    SportsEventCreated(
      id: null,
      markets: null,
      lines: null,
      homeTeamId: null,
      awayTeamId: null,
      homeTeamName: null,
      awayTeamName: null,
      estimatedStartTime: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber, string, string, BigNumber],
      {
        id: BigNumber
        markets: BigNumber[]
        lines: BigNumber[]
        homeTeamId: BigNumber
        awayTeamId: BigNumber
        homeTeamName: string
        awayTeamName: string
        estimatedStartTime: BigNumber
      }
    >

    WinningsClaimed(
      id: null,
      winningOutcome: null,
      winningIndex: null,
      winningName: null,
      amount: null,
      settlementFee: null,
      payout: null,
      receiver: string | null,
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber, string],
      {
        id: BigNumber
        winningOutcome: string
        winningIndex: BigNumber
        winningName: string
        amount: BigNumber
        settlementFee: BigNumber
        payout: BigNumber
        receiver: string
      }
    >
  }

  estimateGas: {
    accumulatedProtocolFee(overrides?: CallOverrides): Promise<BigNumber>

    'accumulatedProtocolFee()'(overrides?: CallOverrides): Promise<BigNumber>

    accumulatedSettlementFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'accumulatedSettlementFees(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    burnShares(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'burnShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    calcCost(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'calcCost(uint256)'(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    calcShares(_collateralIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'calcShares(uint256)'(
      _collateralIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    claimManyWinnings(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'claimManyWinnings(uint256[],address)'(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    claimProtocolFees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'claimProtocolFees()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    claimSettlementFees(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'claimSettlementFees(address)'(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    claimWinnings(
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'claimWinnings(uint256,address)'(
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    collateral(overrides?: CallOverrides): Promise<BigNumber>

    'collateral()'(overrides?: CallOverrides): Promise<BigNumber>

    createEvent(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'createEvent(uint256,string,uint256,string,uint256,uint256,int256,int256,int256[2])'(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    eventCount(overrides?: CallOverrides): Promise<BigNumber>

    'eventCount()'(overrides?: CallOverrides): Promise<BigNumber>

    feePot(overrides?: CallOverrides): Promise<BigNumber>

    'feePot()'(overrides?: CallOverrides): Promise<BigNumber>

    getEventMarkets(_eventId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getEventMarkets(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMarket(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getMarket(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getOwner(overrides?: CallOverrides): Promise<BigNumber>

    'getOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    getSportsEvent(_eventId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getSportsEvent(uint256)'(_eventId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getSportsEventByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getSportsEventByIndex(uint256)'(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getVersion(overrides?: CallOverrides): Promise<BigNumber>

    'getVersion()'(overrides?: CallOverrides): Promise<BigNumber>

    isMarketResolved(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'isMarketResolved(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    linkNode(overrides?: CallOverrides): Promise<BigNumber>

    'linkNode()'(overrides?: CallOverrides): Promise<BigNumber>

    listOfSportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'listOfSportsEvents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    listResolvableEvents(overrides?: CallOverrides): Promise<BigNumber>

    'listResolvableEvents()'(overrides?: CallOverrides): Promise<BigNumber>

    marketCount(overrides?: CallOverrides): Promise<BigNumber>

    'marketCount()'(overrides?: CallOverrides): Promise<BigNumber>

    mintShares(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'mintShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    protocol(overrides?: CallOverrides): Promise<BigNumber>

    'protocol()'(overrides?: CallOverrides): Promise<BigNumber>

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>

    'protocolFee()'(overrides?: CallOverrides): Promise<BigNumber>

    resolveEvent(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'resolveEvent(uint256,uint8,uint256,uint256,uint256,uint256)'(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setLinkNode(
      _newLinkNode: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'setLinkNode(address)'(
      _newLinkNode: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setProtocol(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'setProtocol(address,bool)'(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setProtocolFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'setProtocolFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setSettlementFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'setSettlementFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setStakerFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'setStakerFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    settlementFee(overrides?: CallOverrides): Promise<BigNumber>

    'settlementFee()'(overrides?: CallOverrides): Promise<BigNumber>

    shareFactor(overrides?: CallOverrides): Promise<BigNumber>

    'shareFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    sportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'sportsEvents(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    stakerFee(overrides?: CallOverrides): Promise<BigNumber>

    'stakerFee()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    accumulatedProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'accumulatedProtocolFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    accumulatedSettlementFees(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'accumulatedSettlementFees(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    burnShares(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'burnShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _sharesToBurn: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    calcCost(_shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'calcCost(uint256)'(
      _shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    calcShares(
      _collateralIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'calcShares(uint256)'(
      _collateralIn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    claimManyWinnings(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'claimManyWinnings(uint256[],address)'(
      _ids: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    claimProtocolFees(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'claimProtocolFees()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    claimSettlementFees(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'claimSettlementFees(address)'(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    claimWinnings(
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'claimWinnings(uint256,address)'(
      _id: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'collateral()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    createEvent(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'createEvent(uint256,string,uint256,string,uint256,uint256,int256,int256,int256[2])'(
      _eventId: BigNumberish,
      _homeTeamName: string,
      _homeTeamId: BigNumberish,
      _awayTeamName: string,
      _awayTeamId: BigNumberish,
      _startTimestamp: BigNumberish,
      _homeSpread: BigNumberish,
      _totalScore: BigNumberish,
      _moneylines: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    eventCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'eventCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    feePot(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feePot()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getEventMarkets(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getEventMarkets(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMarket(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getMarket(uint256)'(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getSportsEvent(_eventId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getSportsEvent(uint256)'(
      _eventId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSportsEventByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getSportsEventByIndex(uint256)'(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getVersion()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isMarketResolved(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isMarketResolved(uint256)'(
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    linkNode(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'linkNode()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    listOfSportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'listOfSportsEvents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    listResolvableEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'listResolvableEvents()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    marketCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'marketCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mintShares(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'mintShares(uint256,uint256,address)'(
      _id: BigNumberish,
      _shareToMint: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'protocol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'protocolFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    resolveEvent(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'resolveEvent(uint256,uint8,uint256,uint256,uint256,uint256)'(
      _eventId: BigNumberish,
      _eventStatus: BigNumberish,
      _homeTeamId: BigNumberish,
      _awayTeamId: BigNumberish,
      _homeScore: BigNumberish,
      _awayScore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setLinkNode(
      _newLinkNode: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'setLinkNode(address)'(
      _newLinkNode: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setProtocol(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'setProtocol(address,bool)'(
      _newProtocol: string,
      _claimFirst: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setProtocolFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'setProtocolFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setSettlementFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'setSettlementFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setStakerFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'setStakerFee(uint256)'(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    settlementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'settlementFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    shareFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'shareFactor()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sportsEvents(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sportsEvents(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    stakerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'stakerFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
